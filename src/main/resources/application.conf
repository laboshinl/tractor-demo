akka.cluster.seed-nodes = [
  "akka.tcp://ClusterSystem@127.0.0.1:2551"
]

//akka.actor.warn-about-java-serializer-usage = off
akka {
  loglevel = "INFO"
}

tractor.block.size = 40

akka.remote.netty.tcp {
  hostname = "127.0.0.1"
  port = 2551
  bind-hostname = "0.0.0.0"
  bind-port = 2551
}

akka.actor {
  provider = "akka.cluster.ClusterActorRefProvider"
}

akka.actor.default-dispatcher {
  //  throughput = 100
 fork-join-executor {
    parallelism-min = 30
    parallelism-max = 30
    //    parallelism-factor = 10
  }
}
//  //  executor = "thread-pool-executor"
//  //  # Configuration for the thread pool
//  //  thread-pool-executor {
//  //    # minimum number of threads to cap factor-based core number to
//  //    core-pool-size-min = 2
//  //    # No of core threads ... ceil(available processors * factor)
//  //    core-pool-size-factor = 1.0
//  //    # maximum number of threads to cap factor-based number to
//  //    core-pool-size-max = 64
//  //  }
//  //  # Throughput defines the maximum number of messages to be
//  //  # processed per actor before the thread jumps to the next actor.
//  //  # Set to 1 for as fair as possible.
//  //  throughput = 100
//}
akka.cluster {
  min-nr-of-members = 2
  failure-detector {
    threshold = 12.0
    min-std-deviation = 10 s
    heartbeat-interval = 30 s
    acceptable-heartbeat-pause = 30 s //30
  }
}


akka.remote {
  maximum-payload-bytes = 90000000 bytes
  netty.tcp {
    message-frame-size = 90000000b
    send-buffer-size = 90000000b
    receive-buffer-size = 90000000b
    maximum-frame-size = 90000000b
  }
}

akka {
  actor {
    kryo {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "nograph"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. That this strategy was
      # added in version 0.4.1 and will not work with the previous versions

      idstrategy = "inctemental"

      # Define a default queue builder, by default ConcurrentLinkedQueue is used.
      # Create your own queue builder by implementing the trait QueueBuilder,
      # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
      #
      # If you pass a bounded queue make sure its capacity is equal or greater than the
      # maximum concurrent remote dispatcher threads your application will ever have
      # running; failing to do this will have a negative performance impact:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = "off"

      # Settings for aes encryption, if included in transformations AES
      # algo mode, key and custom key class can be specified AES algo mode
      # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
      # If custom key class is provided, Kryo will use the class specified
      # by a fully qualified class name to get custom AES key. Such a
      # class should define the method 'kryoAESKey'. This key overrides 'key'.
      # If class doesn't contain 'kryoAESKey' method, specified key is used.
      # If this is not present, default key is used


      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = false

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If proviced, Kryo uses the class specified by a fully qualified
      # class name to perform a custom initialization of Kryo instances in
      # addition to what is done automatically based on the config file.
      #kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

      # If enabled, allows Kryo to resolve subclasses of registered Types.
      #
      # This is primarily useful when idstrategy is set to "explicit". In this
      # case, all classes to be serialized must be explicitly registered. The
      # problem is that a large number of common Scala and Akka types (such as
      # Map and ActorRef) are actually traits that mask a large number of
      # specialized classes that deal with various situations and optimizations.
      # It isn't straightforward to register all of these, so you can instead
      # register a single supertype, with a serializer that can handle *all* of
      # the subclasses, and the subclasses get serialized with that.
      #
      # Use this with care: you should only rely on this when you are confident
      # that the superclass serializer covers all of the special cases properly.
      resolve-subclasses = true

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is:
      # - mandatory for idstrategy="explicit"
      # - ignored   for idstrategy="default"
      # - optional  for incremental and automatic
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types


      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
      mappings {
       // "scala.collection.immutable.Map" = 123,
        //"package2.name2.className2" = 21
      }
    }
  }
}



akka.actor.serializers {
  java = "akka.serialization.JavaSerializer"
  kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
}
akka.actor.serialization-bindings {
  "ru.laboshinl.tractor.BidirectionalFlows" = kryo
  "ru.laboshinl.tractor.TractorTcpFlow" = kryo
  "ru.laboshinl.tractor.TractorTcpPacket" = kryo
  "ru.laboshinl.tractor.BidirectionalTcpFlow" = kryo
  "ru.laboshinl.tractor.FileJob" = kryo
  "ru.laboshinl.tractor.FileChunkWithBs" = kryo
  "ru.laboshinl.tractor.HashedFlow" = kryo
  "ru.laboshinl.tractor.ReadPacket" = kryo
  "ru.laboshinl.tractor.FileChunk" = kryo
  "ru.laboshinl.tractor.Skipped" = kryo
//  "akka.dispatch.sysmsg.Supervise" = kryo
//  "akka.dispatch.sysmsg.Watch" = kryo
//  "akka.remote.RemoteScope" = kryo
//  "akka.actor.Scope" = kryo
}
# Enable metrics extension in akka-cluster-metrics.
akka.extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$" ]
akka.cluster.metrics.enabled = off

